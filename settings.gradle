pluginManagement {
	repositories {
		mavenLocal()   //配置先从本地仓库寻找jar包，优先寻找上一个配置，找到不执行下面的配置
		mavenCentral() //配置从中央仓库寻找
		google()       //第三方仓库
		jcenter()      //代码托管库：设置之后可以在项目中轻松引用jcenter上的开源项目
		gradlePluginPortal()
		maven { url "https://repo.spring.io/release" }
	}
}

plugins {
	id "com.gradle.enterprise" version "3.11.1"
	id "io.spring.ge.conventions" version "0.0.11"
}

include "spring-aop"
include "spring-aspects"
include "spring-beans"
include "spring-context"
include "spring-context-indexer"
include "spring-context-support"
include "spring-core"
include "spring-expression"
include "spring-instrument"
include "spring-jcl"
include "spring-jdbc"
include "spring-jms"
include "spring-messaging"
include "spring-orm"
include "spring-oxm"
include "spring-r2dbc"
include "spring-test"
include "spring-tx"
include "spring-web"
include "spring-webflux"
include "spring-webmvc"
include "spring-websocket"
include "framework-bom"
include "integration-tests"

rootProject.name = "spring"
rootProject.children.each {project ->
	project.buildFileName = "${project.name}.gradle"
}


settings.gradle.projectsLoaded {
	gradleEnterprise {
		buildScan {
			File buildDir = settings.gradle.rootProject.getBuildDir()
			buildDir.mkdirs()
			new File(buildDir, "build-scan-uri.txt").text = "(build scan not generated)"
			buildScanPublished { scan ->
				if (buildDir.exists()) {
					new File(buildDir, "build-scan-uri.txt").text = "${scan.buildScanUri}\n"
				}
			}
		}
	}
}
